# top-level CMakeLists.txt
cmake_minimum_required (VERSION 3.0 FATAL_ERROR)


project (ProblemTest_project)
if(WITH_SWIG)
  set(ICOCO_SWIG_USE yes)
endif()

set(MEDCOUPLING_USE no)
if (WITH_MEDCOUPLING_DIR)
  set(MEDCOUPLING_USE yes)
  set(MEDCOUPLING_DIR ${WITH_MEDCOUPLING_DIR})
  set(MEDCOUPLING_CPPFLAGS -DMEDCOUPLING)
  include(${WITH_MEDCOUPLING_DIR}/cmake_files/MEDCouplingConfig.cmake)
  set (libdirs ${MEDCOUPLING_DIR}/lib/;${MEDCoupling_EXTRA_ENV_LD_LIBRARY_PATH};${MEDFILE_ROOT_DIR_EXP}/lib)
  set(MEDCOUPLING_LIBS)
  foreach(liba medloader medcoupling interpkernel med medimport medC hdf5)
    if (WITH_SALOME_ROOT)
      my_find_library_dyn(${liba} "${libdirs}")
    else()
      my_find_library(${liba} "${libdirs}")
    endif()
    set(MEDCOUPLING_LIBS ${MEDCOUPLING_LIBS} ${lib${liba}})
  endforeach()
  if (ICOCOV2FLAG)
     set (MEDCOUPLING_CPPFLAGS ${MEDCOUPLING_CPPFLAGS} "-DMC9")
  endif()
endif()

set(EXECUTABLE_OUTPUT_PATH ${CMAKE_SOURCE_DIR})
set(LIBRARY_OUTPUT_PATH ${CMAKE_SOURCE_DIR})
# ICoCo CMakeLists.txt
set(ICOCOV2FLAG ON)
if(ICOCOV2FLAG)
   set (V2 "V2")
   add_definitions (-DICOCOV2)
   if(COMPILER_SUPPORTS_CXX11)
     MESSAGE(STATUS "Enable C++11 support for ICoCo V2")
     add_definitions (-std=c++11)
   endif()
else()
   set (V2 "")
endif()
  if (MEDCOUPLING_USE)
    set (llibs ${llibs} ${MEDCOUPLING_LIBS})
  endif()
  set(llibs ${llibs} ${CMAKE_EXE_LINKER_FLAGS_${suffix}})
  include_directories(../include)
  include_directories(.)
  add_library(ProblemTest  SHARED ProblemTest.cxx  ../src/ICoCoExceptions.cpp  ../src/ICoCoField.cpp  ../src/ICoCoProblem.cpp  ../src/ICoCoTrioField.cpp)
  add_library(ProblemTest_step  SHARED ProblemTest.cxx  ../src/ICoCoExceptions.cpp  ../src/ICoCoField.cpp  ../src/ICoCoProblem.cpp  ../src/ICoCoTrioField.cpp)
  add_executable(superv superv.cpp)
  target_link_libraries (superv  ProblemTest dl)
  # set_target_properties(ProblemTest PROPERTIES OUTPUT_NAME ProblemTest CLEAN_DIRECT_OUTPUT 1 NO_SONAME 1)
  set_target_properties (ProblemTest PROPERTIES LINKER_LANGUAGE CXX)
  set_target_properties (ProblemTest_step PROPERTIES LINKER_LANGUAGE CXX COMPILE_FLAGS -D_step_ )
  target_link_libraries (ProblemTest -Wl,-rpath=${CMAKE_SOURCE_DIR})
  target_link_libraries (ProblemTest_step -Wl,-rpath=${CMAKE_SOURCE_DIR})
  #install(TARGETS ProblemTest DESTINATION src/ICoCo/lib)
  #install(TARGETS icoco.${suffix} DESTINATION src/ICoCo/lib)

if (ICOCO_SWIG_USE)
  cmake_policy(SET CMP0086  NEW)
  cmake_policy(SET CMP0078  NEW)
  find_package(SWIG REQUIRED)
  set(CMAKE_SWIG_OUTDIR ${CMAKE_SOURCE_DIR})
  include(${SWIG_USE_FILE})
  execute_process(
      COMMAND python -c "import sys;print(sys.version_info.major)"
      RESULT_VARIABLE toto OUTPUT_VARIABLE PYMAJOR ERROR_VARIABLE error)
  string(STRIP ${PYMAJOR} PYMAJORS)
  if (${PYMAJORS} EQUAL 2)
    find_package(PythonLibs 2 REQUIRED)
  else()
    find_package(Python COMPONENTS Interpreter Development)
    if(ICOCOV2FLAG)
      set(CMAKE_SWIG_FLAGS "${MEDCOUPLING_CPPFLAGS};-DICOCO${V2}")
    endif()
    set(PYTHON_INCLUDE_PATH ${Python_INCLUDE_DIRS})
    set(PYTHON_LIBRARIES ${Python_LIBRARIES})
  endif()
  set(CMAKE_SWIG_FLAGS "${MEDCOUPLING_CPPFLAGS}")
  if(ICOCOV2FLAG)
    set(CMAKE_SWIG_FLAGS "${CMAKE_SWIG_FLAGS};-DICOCO${V2}")
  endif()
  if (MEDCOUPLING_USE)
    if (MEDCOUPLING_ENABLE_PYTHON)
      message("medcoupling has python")
      set(CMAKE_SWIG_FLAGS "${CMAKE_SWIG_FLAGS};-DMEDCOUPLING_ENABLE_PYTHON")
    else()
      message(WARNING "medcoupling has no python")
    endif()
  endif()
  include_directories(
      ../
      ../include
      ../swig
      ${MEDCOUPLING_DIR}/include
      ${PYTHON_INCLUDE_PATH})

    #configure_file(../swig/your_code.i ProblemTest.i COPYONLY)
    FILE(READ ../swig/your_code.i  IO_UTILS)
   STRING(REGEX REPLACE "your_code.h" "ProblemTest.hxx" MOD_IO_UTILS "${IO_UTILS}" )
   STRING(REGEX REPLACE "ProblemYourCode" "ProblemTest" IO_UTILS "${MOD_IO_UTILS}" )
   STRING(REGEX REPLACE "your_code_icoco" "ProblemTest" MOD_IO_UTILS "${IO_UTILS}" )
FILE(WRITE ${CMAKE_CURRENT_BINARY_DIR}/ProblemTest.i "${MOD_IO_UTILS}")
    set_source_files_properties(${CMAKE_CURRENT_BINARY_DIR}/ProblemTest.i PROPERTIES CPLUSPLUS ON)
    set_property(SOURCE ${CMAKE_CURRENT_BINARY_DIR}/ProblemTest.i PROPERTY SWIG_FLAGS -module ProblemTest)
    SWIG_ADD_LIBRARY(ProblemTest_python LANGUAGE python SOURCES  ${CMAKE_CURRENT_BINARY_DIR}/ProblemTest.i)
    swig_link_libraries(ProblemTest_python ProblemTest ${PYTHON_LIBRARIES})
    #set_target_properties(${SWIG_MODULE_Cathare_${suffix}_REAL_NAME} PROPERTIES INSTALL_RPATH "$ORIGIN/")
    #install(TARGETS ${SWIG_MODULE_Cathare_${suffix}_REAL_NAME} DESTINATION src/ICoCo/lib)
    #install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Cathare_${suffix}.py DESTINATION src/ICoCo/lib
    # install(FILES Cathare.i DESTINATION src/ICoCo/python)
endif()
